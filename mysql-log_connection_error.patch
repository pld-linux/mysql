# name       : log_connection_error.patch
# introduced : 12
# maintainer : Oleg
#
#!!! notice !!!
# Any small change to this file in the main branch
# should be done or reviewed by the maintainer!
--- a/mysql-test/r/connect.result
+++ b/mysql-test/r/connect.result
@@ -1,3 +1,4 @@
+set global log_warnings=0;
 drop table if exists t1,t2;
 show tables;
 Tables_in_mysql
@@ -229,3 +230,4 @@
 # ------------------------------------------------------------------
 # -- End of 5.1 tests
 # ------------------------------------------------------------------
+set global log_warnings=1;
--- a/mysql-test/t/connect.test
+++ b/mysql-test/t/connect.test
@@ -1,3 +1,5 @@
+set global log_warnings=0;
+
 # This test is to check various cases of connections
 # with right and wrong password, with and without database
 # Unfortunately the check is incomplete as we can't connect without database
@@ -328,3 +330,4 @@
 # Wait till all disconnects are completed
 --source include/wait_until_count_sessions.inc
 
+set global log_warnings=1;
--- /dev/null
+++ b/patch_info/log_connection_error.patch
@@ -0,0 +1,6 @@
+File=log_connection_error.patch
+Name=logging abandoned connections
+Version=1.0
+Author=Percona <info@percona.com>
+License=GPL
+Comment=
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -5085,6 +5085,10 @@
 
     DBUG_PRINT("error",("Too many connections"));
     close_connection(thd, ER_CON_COUNT_ERROR, 1);
+    if (global_system_variables.log_warnings)
+    {
+      sql_print_warning("%s", ER(ER_CON_COUNT_ERROR));
+    }
     statistic_increment(denied_connections, &LOCK_status);
     delete thd;
     DBUG_VOID_RETURN;
@@ -5472,6 +5476,10 @@
     if (!(thd->net.vio= vio_new_win32pipe(hConnectedPipe)) ||
 	my_net_init(&thd->net, thd->net.vio))
     {
+      if (global_system_variables.log_warnings)
+      {
+        sql_print_warning("%s", ER(ER_OUT_OF_RESOURCES));
+      }
       close_connection(thd, ER_OUT_OF_RESOURCES, 1);
       delete thd;
       continue;
@@ -5667,6 +5675,10 @@
                                                    event_conn_closed)) ||
                         my_net_init(&thd->net, thd->net.vio))
     {
+      if (global_system_variables.log_warnings)
+      {
+        sql_print_warning("%s", ER(ER_OUT_OF_RESOURCES));
+      }
       close_connection(thd, ER_OUT_OF_RESOURCES, 1);
       errmsg= 0;
       goto errorconn;
--- /dev/null
+++ b/mysql-test/r/percona_log_connection_error.result
@@ -0,0 +1,15 @@
+SET @old_max_connections = @@max_connections;
+SET @old_log_warnings = @@log_warnings;
+SET GLOBAL max_connections=2;
+SET GLOBAL LOG_WARNINGS = 0;
+connect(localhost,root,,test,port,socket);
+ERROR HY000: Too many connections
+SET GLOBAL LOG_WARNINGS = 1;
+connect(localhost,root,,test,port,socket);
+ERROR HY000: Too many connections
+SET GLOBAL LOG_WARNINGS = 0;
+connect(localhost,root,,test,port,socket);
+ERROR HY000: Too many connections
+SET GLOBAL max_connections = @old_max_connections;
+SET GLOBAL log_warnings = @old_log_warnings;
+Occurences: 1
--- /dev/null
+++ b/mysql-test/t/percona_log_connection_error-master.opt
@@ -0,0 +1 @@
+--log-error
--- /dev/null
+++ b/mysql-test/t/percona_log_connection_error.test
@@ -0,0 +1,60 @@
+--source include/not_embedded.inc
+
+connect (main,localhost,root,,);
+connection main;
+SET @old_max_connections = @@max_connections;
+SET @old_log_warnings = @@log_warnings;
+SET GLOBAL max_connections=2;
+let $port=`SELECT Variable_value FROM INFORMATION_SCHEMA.SESSION_VARIABLES WHERE Variable_name LIKE 'port'`;
+let $socket=`SELECT Variable_value FROM INFORMATION_SCHEMA.SESSION_VARIABLES WHERE Variable_name LIKE 'socket'`;
+
+SET GLOBAL LOG_WARNINGS = 0;
+--connect (conn0,localhost,root,,)
+connection conn0;
+replace_result $port port $socket socket;
+--error 1040
+--connect(conn1,localhost,root,,)
+disconnect conn0;
+SLEEP 0.1; # tsarev: hack, but i don't know (and didn't find) how right
+
+connection main;
+SET GLOBAL LOG_WARNINGS = 1;
+--connect (conn1,localhost,root,,)
+replace_result $port port $socket socket;
+--error 1040
+--connect (conn0,localhost,root,,)
+disconnect conn1;
+SLEEP 0.1; # tsarev: hack, but i don't know (and didn't find) how right
+
+connection main;
+SET GLOBAL LOG_WARNINGS = 0;
+--connect (conn0,localhost,root,,)
+replace_result $port port $socket socket;
+--error 1040
+--connect(conn1,localhost,root,,)
+disconnect conn0;
+SLEEP 0.1; # tsarev: hack, but i don't know (and didn't find) how right
+
+connection main;
+SET GLOBAL max_connections = @old_max_connections;
+SET GLOBAL log_warnings = @old_log_warnings;
+let $log_error_= `SELECT @@GLOBAL.log_error`;
+if(!`select LENGTH('$log_error_')`)
+{
+  # MySQL Server on windows is started with --console and thus
+  # does not know the location of its .err log, use default location
+  let $log_error_ = $MYSQLTEST_VARDIR/log/mysqld.1.err;
+}
+# Assign env variable LOG_ERROR
+let LOG_ERROR=$log_error_;
+
+perl;
+  my $log_file= $ENV{'LOG_ERROR'} or die "LOG_ERROR not set\n";
+  open(FILE, "$log_file") or die("Unable to open $log_error: $!\n");
+  my $count= () = grep(/Too many connections/g,<FILE>);
+  print "Occurences: $count\n";
+  close(FILE);
+  # Clean log error file
+  open(FILE, '>', $log_file);
+  close(FILE);
+EOF
