# name       : suppress_log_warning_1592.patch
# introduced : 11 or before
# maintainer : Oleg
#
#!!! notice !!!
# Any small change to this file in the main branch
# should be done or reviewed by the maintainer!
--- a/sql/mysql_priv.h
+++ b/sql/mysql_priv.h
@@ -2108,6 +2108,7 @@
 extern my_bool opt_readonly, lower_case_file_system;
 extern my_bool opt_userstat_running, opt_thread_statistics;
 extern my_bool opt_optimizer_fix;
+extern my_bool opt_suppress_log_warning_1592;
 extern my_bool opt_enable_named_pipe, opt_sync_frm, opt_allow_suspicious_udfs;
 extern my_bool opt_secure_auth;
 extern char* opt_secure_file_priv;
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -540,6 +540,7 @@
 my_bool opt_old_style_user_limits= 0, trust_function_creators= 0;
 my_bool opt_userstat_running= 0, opt_thread_statistics= 0;
 my_bool opt_optimizer_fix= 0;
+my_bool opt_suppress_log_warning_1592= 0;
 /*
   True if there is at least one per-hour limit for some user, so we should
   check them before each query (and possibly reset counters when hour is
@@ -5865,6 +5866,7 @@
   OPT_USERSTAT_RUNNING,
   OPT_THREAD_STATISTICS,
   OPT_OPTIMIZER_FIX,
+  OPT_SUPPRESS_LOG_WARNING_1592,
   OPT_USE_GLOBAL_LONG_QUERY_TIME,
   OPT_USE_GLOBAL_LOG_SLOW_CONTROL,
   OPT_SLOW_QUERY_LOG_MICROSECONDS_TIMESTAMP,
@@ -7385,6 +7387,10 @@
    "Enable unofficial optimizer fixes.",
    (uchar**) &opt_optimizer_fix, (uchar**) &opt_optimizer_fix,
    0, GET_BOOL, NO_ARG, 1, 0, 1, 0, 1, 0},
+  {"suppress_log_warning_1592", OPT_SUPPRESS_LOG_WARNING_1592,
+   "suppress warning about unsafe statements for binary logging",
+   (uchar**) &opt_suppress_log_warning_1592, (uchar**) &opt_suppress_log_warning_1592,
+   0, GET_BOOL, NO_ARG, 0, 0, 1, 0, 1, 0},
   {"binlog-direct-non-transactional-updates", OPT_BINLOG_DIRECT_NON_TRANS_UPDATE,
    "Causes updates to non-transactional engines using statement format to be "
    "written directly to binary log. Before using this option, make sure that "
--- a/sql/set_var.cc
+++ b/sql/set_var.cc
@@ -573,6 +573,8 @@
 						      &opt_thread_statistics);
 static sys_var_bool_ptr		sys_optimizer_fix(&vars, "optimizer_fix",
 						  &opt_optimizer_fix);
+static sys_var_bool_ptr		sys_suppress_log_warning_1592(&vars, "suppress_log_warning_1592",
+							      &opt_suppress_log_warning_1592);
 static sys_var_thd_ulong	sys_read_rnd_buff_size(&vars, "read_rnd_buffer_size",
 					       &SV::read_rnd_buff_size);
 static sys_var_thd_ulong	sys_div_precincrement(&vars, "div_precision_increment",
--- a/sql/sql_class.cc
+++ b/sql/sql_class.cc
@@ -4140,6 +4140,7 @@
                  ER_BINLOG_UNSAFE_STATEMENT,
                  ER(ER_BINLOG_UNSAFE_STATEMENT));
     if (global_system_variables.log_warnings &&
+        !opt_suppress_log_warning_1592 &&
         !(binlog_flags & BINLOG_FLAG_UNSAFE_STMT_PRINTED))
     {
       sql_print_warning("%s Statement: %.*s",
--- /dev/null
+++ b/mysql-test/r/percona_suppress_log_warning_1592.result
@@ -0,0 +1,28 @@
+SET @old_log_warnings = @@log_warnings;
+SET @old_suppress_log_warning_1592 = @@suppress_log_warning_1592;
+DROP TABLE IF EXISTS t1;
+CREATE TABLE t1 (a VARCHAR(36), b VARCHAR(20));
+SET GLOBAL SUPPRESS_LOG_WARNING_1592 = 0;
+SET GLOBAL LOG_WARNINGS = 0;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+Warnings:
+Note	1592	Statement may not be safe to log in statement format.
+SET GLOBAL LOG_WARNINGS = 1;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+Warnings:
+Note	1592	Statement may not be safe to log in statement format.
+SET GLOBAL SUPPRESS_LOG_WARNING_1592 = 1;
+SET GLOBAL LOG_WARNINGS = 0;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+Warnings:
+Note	1592	Statement may not be safe to log in statement format.
+SET GLOBAL LOG_WARNINGS = 1;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+Warnings:
+Note	1592	Statement may not be safe to log in statement format.
+DROP TABLE t1;
+SET GLOBAL log_warnings = @old_log_warnings;
+SET GLOBAL suppress_log_warning_1592 = @old_suppress_log_warning_1592;
+# Count the number of times the "Unsafe" message was printed
+# to the error log.
+Occurrences: 1
--- /dev/null
+++ b/mysql-test/t/percona_suppress_log_warning_1592-master.opt
@@ -0,0 +1 @@
+--log-error
--- /dev/null
+++ b/mysql-test/t/percona_suppress_log_warning_1592.test
@@ -0,0 +1,49 @@
+-- source include/have_log_bin.inc
+-- source include/have_binlog_format_statement.inc
+
+SET @old_log_warnings = @@log_warnings;
+SET @old_suppress_log_warning_1592 = @@suppress_log_warning_1592;
+
+--disable_warnings
+DROP TABLE IF EXISTS t1;
+--enable_warnings
+CREATE TABLE t1 (a VARCHAR(36), b VARCHAR(20));
+SET GLOBAL SUPPRESS_LOG_WARNING_1592 = 0;
+SET GLOBAL LOG_WARNINGS = 0;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+SET GLOBAL LOG_WARNINGS = 1;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+SET GLOBAL SUPPRESS_LOG_WARNING_1592 = 1;
+SET GLOBAL LOG_WARNINGS = 0;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+SET GLOBAL LOG_WARNINGS = 1;
+INSERT INTO t1 VALUES(UUID(), 'suppress_1592');
+DROP TABLE t1;
+
+SET GLOBAL log_warnings = @old_log_warnings;
+SET GLOBAL suppress_log_warning_1592 = @old_suppress_log_warning_1592;
+
+let $log_error_= `SELECT @@GLOBAL.log_error`;
+if(!`select LENGTH('$log_error_')`)
+{
+  # MySQL Server on windows is started with --console and thus
+  # does not know the location of its .err log, use default location
+  let $log_error_ = $MYSQLTEST_VARDIR/log/mysqld.1.err;
+}
+# Assign env variable LOG_ERROR
+let LOG_ERROR=$log_error_;
+
+--echo # Count the number of times the "Unsafe" message was printed
+--echo # to the error log.
+
+perl;
+  use strict;
+  my $log_error= $ENV{'LOG_ERROR'} or die "LOG_ERROR not set";
+  open(FILE, "$log_error") or die("Unable to open $log_error: $!\n");
+  my $count = () = grep(/suppress_1592/g,<FILE>);
+  print "Occurrences: $count\n";
+  close(FILE);
+  # Clean error log file
+  open(FILE, '>', "$log_error");
+  close(FILE);
+EOF
